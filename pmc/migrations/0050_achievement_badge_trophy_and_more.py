# Generated by Django 5.2 on 2025-05-12 18:31

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pmc', '0049_playgroupjoinrequest'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pmc_id', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('reward_category', models.IntegerField(choices=[(0, 'Participation'), (1, 'Skill'), (2, 'Task')], default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('sort_order', models.PositiveSmallIntegerField(default=1)),
            ],
            options={
                'ordering': ('sort_order', 'name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pmc_id', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('reward_category', models.IntegerField(choices=[(0, 'Participation'), (1, 'Skill'), (2, 'Task')], default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('sort_order', models.PositiveSmallIntegerField(default=1)),
                ('src', models.URLField(blank=True, default=None, null=True)),
                ('is_eo_assignable', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('sort_order', 'name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trophy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pmc_id', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('reward_category', models.IntegerField(choices=[(0, 'Participation'), (1, 'Skill'), (2, 'Task')], default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('sort_order', models.PositiveSmallIntegerField(default=1)),
                ('src', models.URLField(blank=True, default=None, null=True)),
            ],
            options={
                'ordering': ('sort_order', 'name'),
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='playgroupjoinrequest',
            options={'ordering': ['-created_on']},
        ),
        migrations.CreateModel(
            name='AchievementTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tier', models.IntegerField(choices=[(0, 'Bronze'), (1, 'Silver'), (2, 'Gold'), (3, 'Ascension')])),
                ('src', models.URLField(blank=True, default=None, null=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='pmc.achievement')),
            ],
            options={
                'ordering': ('tier',),
            },
        ),
        migrations.CreateModel(
            name='AchievementCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Event Matches'), (1, 'Sealed Event Matches'), (2, 'Archon Event Matches'), (3, 'Alliance Event Matches'), (4, 'Adaptive Event Matches'), (5, 'Tournament Match Wins'), (6, 'Sealed Tournament Match Wins'), (7, 'Archon Tournament Match Wins'), (8, 'Alliance Tournament Match Wins'), (9, 'Adaptive Tournament Match Wins'), (10, 'Events')], default=0)),
                ('amount', models.PositiveIntegerField(default=0)),
                ('achievement_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='pmc.achievementtier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrophyCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'Event Matches'), (1, 'Sealed Event Matches'), (2, 'Archon Event Matches'), (3, 'Alliance Event Matches'), (4, 'Adaptive Event Matches'), (5, 'Tournament Match Wins'), (6, 'Sealed Tournament Match Wins'), (7, 'Archon Tournament Match Wins'), (8, 'Alliance Tournament Match Wins'), (9, 'Adaptive Tournament Match Wins'), (10, 'Events')], default=0)),
                ('amount', models.PositiveIntegerField(default=0)),
                ('trophy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='pmc.trophy')),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievementTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(auto_now_add=True)),
                ('achievement_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievement_tiers', to='pmc.achievementtier')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievement_tiers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='pmc.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTrophy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(auto_now_add=True)),
                ('amount', models.PositiveIntegerField(default=0)),
                ('trophy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_trophies', to='pmc.trophy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trophies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='achievementtier',
            constraint=models.UniqueConstraint(fields=('achievement', 'tier'), name='unique_achievement_tier'),
        ),
        migrations.AddConstraint(
            model_name='trophycriteria',
            constraint=models.UniqueConstraint(fields=('trophy',), name='unique_trophy_criteria'),
        ),
        migrations.AddConstraint(
            model_name='userachievementtier',
            constraint=models.UniqueConstraint(fields=('user', 'achievement_tier'), name='unique_user_achievement_tier'),
        ),
        migrations.AddConstraint(
            model_name='userbadge',
            constraint=models.UniqueConstraint(fields=('user', 'badge'), name='unique_user_badge'),
        ),
        migrations.AddConstraint(
            model_name='usertrophy',
            constraint=models.UniqueConstraint(fields=('user', 'trophy'), name='unique_user_trophy'),
        ),
    ]
